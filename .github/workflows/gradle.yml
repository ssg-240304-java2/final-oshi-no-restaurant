name: Java CI with Gradle used Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set Yaml
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application.yml 
      env:
        spring.datasource.url: ${{ secrets.DB_URL }} 
        spring.datasource.username: ${{ secrets.DB_USERNAME }} 
        spring.datasource.password: ${{ secrets.DB_PASSWORD }} 
        spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
        spring.mail.host: smtp.gmail.com
        spring.mail.port: 587
        spring.mail.username: ${{secrets.GMAIL_ACCOUNT}}
        spring.mail.password: ${{secrets.GMAIL_PASSWORD}}
        spring.mail.properties.mail.smtp.auth: true
        spring.mail.properties.mail.smtp.timeout: 5000
        spring.mail.properties.mail.smtp.starttls.enable: true
        cloud.aws.credentials.access-key: ${{ secrets.STORAGE_ACCESS_KEY }}
        cloud.aws.credentials.secret-key: ${{ secrets.STORAGE_SECRET_KEY }}
        cloud.aws.stack.auto: false
        cloud.aws.region.static: kr-standard
        cloud.aws.s3.endpoint: https://kr.object.ncloudstorage.com
        cloud.aws.s3.bucket: ${{ secrets.STORAGE_BUCKET }}
        coolsms.api.key: ${{ secrets.COOLSMS_API_KEY }}
        coolsms.api.secret: ${{ secrets.COOLSMS_API_SECRET }}
        coolsms.api.number: ${{ secrets.COOLSMS_API_NUMBER }}

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eataku:latest .

    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/eataku:latest

  run-docker-image-on-ec2:
    needs: build
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    
    steps:
      - name: execute remote ssh & docker stop and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_SSH_HOST }}
          username: ${{ secrets.REMOTE_SSH_NAME }}
          password: ${{ secrets.REMOTE_SSH_PWD }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            whoami
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/eataku:latest
            sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
            sudo docker run --name eataku --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/eataku:latest
            sudo docker system prune -f
